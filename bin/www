#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('node-blog:server');
var http = require('http');
var https = require('https');
var ws = require('../config/socket')
var fs = require('fs')
var path = require('path')
/**
 * Get port from environment and store in Express.
 */
var host = normalizePort(process.env.PORT || '0.0.0.0');
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

//导入生成的证书文件
//读取key后缀的文件
var privatekey = fs.readFileSync(path.join(__dirname,"../config/cert.pem"), 'utf-8'); 

//读取crt文件
var cretificate = fs.readFileSync(path.join(__dirname,"../config/cert.key"),'utf-8');

var certInfo = {
  key: cretificate,
  cert:privatekey
}

var server2 = https.createServer(certInfo,app);

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port, () => {
  console.log(' * http is running :' + port);
});
server.on('error', onError);
server.on('listening', onListening);

server2.listen(443, () => {
  console.log(' * https is running :443' );
});
server2.on('error', onError);
server2.on('listening', onListening);

ws.listen(server, () => {
  console.log(' * socket is running :' + port);
})
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
}
